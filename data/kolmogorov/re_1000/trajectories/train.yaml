# time_step: 0.0002191401125550916
domain:
  - [0, '${eval:2 * ${import:numpy.pi}}']
  - [0, '${eval:2 * ${import:numpy.pi}}']
sim_grid:
  _target_: fourierflow.utils.Grid
  shape: [2048, 2048]
  domain: ${domain} # size of the domain during simulation
out_sizes: [32, 64, 128, 256] # size of the domain for saving to disk
n_trajectories: 32 # number of trajectories to generate
density: 1 # density of the fluid
max_velocity: 7.0 # maximum velocity of the fluid
peak_wavenumber: 4.0 # initial peak wavenumber of the velocity field
seed: 73714 # random seed for the initial velocity field
inner_steps: 64 # take a snapshot of the field once every these many ODE steps
outer_steps: 2441 # the data saved on disk will have these many snapshots
warmup_steps: 0 # we load initial conditions from init_path instead
init_path: ${oc.env:DATA_ROOT}/kolmogorov/re_1000/initial_conditions/train_2048.nc
cfl_safety_factor: 0.5
equation:
  _target_: jax_cfd.spectral.equations.NavierStokes2D
  grid: ${sim_grid}
  viscosity: 1e-3
  drag: 0.1
  smooth: true # use anti-aliasing
  forcing_fn: ${get_method:jax_cfd.spectral.forcings.kolmogorov_forcing_fn}
